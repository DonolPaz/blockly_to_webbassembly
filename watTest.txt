(module
  (func $is_prime (param $n i32) (result i32)
    (local $x i32)
    (local $limit i32)

    ;; Specialfall: n == 2 || n == 3
    local.get $n
    i32.const 2
    i32.eq
    local.get $n
    i32.const 3
    i32.eq
    i32.or
    if (result i32)
      i32.const 1
    else
      ;; n <= 1 -> 0
      local.get $n
      i32.const 1
      i32.le_s
      if (result i32)
        i32.const 0
      else
        ;; n % 2 == 0 -> 0
        local.get $n
        i32.const 2
        i32.rem_s
        i32.eqz
        if (result i32)
          i32.const 0
        else
          ;; n % 3 == 0 -> 0
          local.get $n
          i32.const 3
          i32.rem_s
          i32.eqz
          if (result i32)
            i32.const 0
          else
            ;; Ber채kna limit = floor(sqrt(n)) + 1 (EN g책ng)
            local.get $n
            f64.convert_i32_s
            f64.sqrt
            f64.floor
            i32.trunc_f64_s
            i32.const 1
            i32.add
            local.set $limit

            ;; Initiera x = 6
            i32.const 6
            local.set $x

            (block $break
              (loop $loop
                ;; Om x > limit, break
                local.get $x
                local.get $limit
                i32.gt_s
                if
                  br $break
                end

                ;; Kontrollera n % (x - 1) == 0
                local.get $n
                local.get $x
                i32.const 1
                i32.sub
                i32.rem_s
                i32.eqz
                if
                  i32.const 0
                  return
                end

                ;; Kontrollera n % (x + 1) == 0
                local.get $n
                local.get $x
                i32.const 1
                i32.add
                i32.rem_s
                i32.eqz
                if
                  i32.const 0
                  return
                end

                ;; x += 6
                local.get $x
                i32.const 6
                i32.add
                local.set $x

                br $loop
              )
            )

            ;; Om inga delare hittades, returnera 1 (채r primtal)
            i32.const 1
          end
        end
      end
    end
  )

  (func $count_primes (param $max i32) (result i32)
    (local $count i32)
    (local $num i32)

    i32.const 0
    local.set $count
    i32.const 2
    local.set $num

    (block $break
      (loop $loop
        ;; Avsluta n채r num > max
        local.get $num
        local.get $max
        i32.gt_s
        if
          br $break
        end

        ;; Om primtal, count++
        local.get $num
        call $is_prime
        if
          local.get $count
          i32.const 1
          i32.add
          local.set $count
        end

        ;; num++
        local.get $num
        i32.const 1
        i32.add
        local.set $num

        br $loop
      )
    )

    local.get $count
  )

  (memory (export "memory") 1)

  (export "is_prime" (func $is_prime))
  (export "count_primes" (func $count_primes))
)
